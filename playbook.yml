---

# An Ansible playbook to install the SVPB Web application on a remote Linux machine
# Assumptions:
# - apt-based system; tested on Ubuntu 14.04 LTS; Debian should work fine as well
# - root access has been ensured by copying the public key of the user running this playbook to
#   ~root/.ssh/authorized_keys - like jiffyBox does in a very convenient way
# - there should be an encryption key for dropbox-based backups. See below!
# - Ansible: www.ansible.com/

- name: Prepare package manager
  remote_user: root
  hosts: svpb
  tasks:
    - name: Update cache and install gpg for apt key management
      ansible.builtin.apt:
        name: gpg
        update_cache: yes

- name: Firewall
  remote_user: root
  hosts: svpb
  tasks:
    - name: Get ufw
      apt: name=ufw state=latest
    - name: turn loggin on
      ufw: logging=on
    - name: allow ssh
      ufw: rule=limit port=ssh proto=tcp
    - name: allow OpenSSH
      ufw: rule=limit name=OpenSSH
    - name: allow Web80
      ufw: rule=allow port=80 proto=tcp
    - name: turn on ufw
      ufw: state=enabled policy=deny

  tags: fw

- name: Install dependency of ansible anxs.postgresql role
  hosts: svpb
  remote_user: root
  tasks:
    - name: Ansible postgresdb requirements via apt
      apt: name={{ item }} state=latest
      with_items:
        - python3-psycopg2

- name: PostgresDB
  remote_user: root
  hosts: svpb
  vars:
    postgresql_databases:
      - name: svpbdata
    postgresql_users:
      - name: svpbdb
        pass: Eef1Aef3
        encrypted: yes
    postgresql_user_privileges:
      - name: svpbdb          # user name
        db: svpbdata         # database
        priv: "ALL"        # privilege string format: example: INSERT,UPDATE/table:SELECT/anothertable:ALL
        # TODO: fix privileges as soon as we have to share the databse with someone else
  roles:
    - anxs.postgresql


- name: CreateSVPB-User
  hosts: svpb
  remote_user: root
  tasks:
    - action: user name=svpb comment="SVPB Arbeitsplan User" generate_ssh_key=yes state=present shell=/bin/bash
    # - action: copy src=~/.ssh/id_rsa.pub dest=/home/svpb/.ssh/authorized_keys owner=svpb group=svpb mode=0600
    # Instead of adding own public key (line above) allow access for vagrant's
    # ssh key, which is already authorized for root
    - file:
        path: ~svpb/.ssh
        state: directory
        owner: svpb
        group: svpb
        mode: 0700
    - name: Copy root's authorized_keys to svpb user
      copy:
        src: /root/.ssh/authorized_keys
        dest: ~svpb/.ssh/authorized_keys
        owner: svpb
        group: svpb
        mode: 0700
        force: false
        remote_src: true
    # Old init script for SysV (SysV was replaced by systemd in ubuntu 15.04)
    # ToDo: Match service management to what is done in production
    # - copy: src=./svpb.conf dest=/etc/init/svpb.conf mode=0644


- name: Basic software installation
  hosts: svpb
  remote_user: root
  tasks:
    - name: Basic software via apt
      apt: name={{ item }} state=latest
      with_items:
        - build-essential
        - ntp
        - git
        - language-pack-de-base # needed for localisation of django apps
        - python3-dev # needed to build Pillow
        - zlib1g-dev # needed to build Pillow
        - libjpeg8-dev # needed to build Pillow
        - python3-pip
        - python3-pycurl
        - virtualenv
        - iptables
        # - ccrypt  # was used for backup encryption, needs rework
        - nginx
    - name: Update locales # needed as we just installed language-pack-de-base
      ansible.builtin.command:
        cmd: locale-gen
  tags: software


- name: GetSVPB
  remote_user: svpb
  hosts: svpb
  tasks:
    - name: Get the repository
      git: repo=https://github.com/hkarl/svpb.git dest=/home/svpb/svpb update=false version=django3
    # ToDo: Fix settings.py in django3 branch
    #- name: Patch the settings file to use the Postgres DB
    #  replace: dest=/home/svpb/svpb/svpb/settings.py regexp='django.db.backends.sqlite3' replace='django.db.backends.postgresql_psycopg2'
    #- name: Patch settings for DB name
    #  replace: dest=/home/svpb/svpb/svpb/settings.py regexp='svpb.sq' replace='svpbdata'
    #- name: Patch settings for DB User account
    #  replace: dest=/home/svpb/svpb/svpb/settings.py regexp='UserPlaceholder' replace='svpbdb'
    - name: Patch settings for DB password
      replace: dest=/home/svpb/svpb/svpb/settings.py regexp='XXXXX' replace='Eef1Aef3'
      # replace: dest=/home/svpb/svpb/svpb/settings.py regexp='PasswordPlaceholder' replace='Eef1Aef3'
    # ToDo: Clever credential management with differentiation between production and test VM
    #- name: Copy email settings
    #  copy: src=~/c.prog/svpb/svpb/emailSettings.py dest=/home/svpb/svpb/svpb/emailSettings.py owner=svpb group=svpb mode=0600
    - name: Create logs directory
      file: path=/home/svpb/svpb/logs state=directory
    - name: Install python requirements via pip
      pip:
        requirements: /home/svpb/svpb/requirementsP3.txt
        virtualenv: /home/svpb/svpb-venv
    - name: Install python requirements missing in github repo's requirementsP3.txt
      pip:
        name: django-post_office
        virtualenv: /home/svpb/svpb-venv
    - name: Migrate the database
      shell: cd svpb ; /home/svpb/svpb-venv/bin/python3 manage.py migrate > logs/migrate.out 2> logs/migrate.err
    - name: Cronjob for emailing
      cron: name="send emails" hour="3" minute="0" user=svpb state=present job="cd /home/svpb/svpb ; /home/svpb/svpb-venv/bin/python3 manage.py upcomingJob 2 > /home/svpb/svpb/logs/upcomingJobs.log  2>&1"
    - name: Cronjob for emailaing earlier
      cron: name="send emails" hour="3" minute="10" user=svpb state=present job="cd /home/svpb/svpb ; /home/svpb/svpb-venv/bin/python3 manage.py upcomingJob 5 >> /home/svpb/svpb/logs/upcomingJobs.log  2>&1"
    - name: Cronjob for leistungsreminder
      cron: name="send emails" hour="3" minute="20" user=svpb state=present job="cd /home/svpb/svpb ; /home/svpb/svpb-venv/bin/python3 manage.py reminderLeistungen > /home/svpb/svpb/logs/reminderLeistungen.log  2>&1"
  tags: svpb

- name: Nginx configuration
  # Compare http://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html
  remote_user: svpb
  hosts: svpb
  vars:
    svpbhome: /home/svpb/svpb
    svpbfqdn: mein.svpb.de
  tasks:
    # static files in place:
    - name: Ensure static directory exists
      file:  dest=/home/svpb/svpb/static state=directory mode=755
    - name: Patch STATIC_ROOT in svpb settings
      replace: dest=/home/svpb/svpb/svpb/settings.py regexp="STATIC_ROOT = ''" replace="STATIC_ROOT = '{{ svpbhome }}/static'"
    - name: Run collectstatic
      django_manage:  command=collectstatic app_path="{{ svpbhome }}" virtualenv=/home/svpb/svpb-venv
    # prepare nginx configuration:
    - name: Patch the svpb_nginx conf file from the default in the git repo FQDN
      replace: dest=/home/svpb/svpb/wsgi/svpb_nginx.conf regexp='svpbfqdn' replace='{{ svpbfqdn }}'
    - name: Patch the svpb_nginx conf file from the default in the git repo Home
      replace: dest=/home/svpb/svpb/wsgi/svpb_nginx.conf regexp='svpbhome' replace='{{ svpbhome }}'
    # symblink the just created config file
    - name: Symlink the svpb configuration file from nginx
      file: dest=/etc/nginx/sites-enabled/svpb_conf.conf src=/home/svpb/svpb/wsgi/svpb_nginx.conf state=link
      remote_user: root
    # tweak the uwsgi ini file settings
    - name: Set chdir in uwsgi ini file
      ini_file: dest=/home/svpb/svpb/wsgi/uwsgi.ini section=uwsgi option=chdir value=/home/svpb/svpb
    - name: Set module in uwsgi ini file
      ini_file: dest=/home/svpb/svpb/wsgi/uwsgi.ini section=uwsgi option=module value=svpb.wsgi
    - name: Set socket in uwsgi ini file
      ini_file: dest=/home/svpb/svpb/wsgi/uwsgi.ini section=uwsgi option=socket value=":8001"
    # restart nginx
    - name: restart nginx to be on the safe side
      service: name=nginx state=restarted enabled=yes
    # start uwsgi happens via the svpb start!
  tags: nginx

- name: System setup
  remote_user: root
  hosts: svpb
  tasks:
    - name: Logrotate for nginx
      logrotate: name=nginx path=/var/log/nginx/*.log
      args:
        options:
          - daily
          - rotate 10
          - compress
          - missingok
    - name: Logrotate for svpb
      logrotate: name=svpb path=/home/svpb/svpb/logs/*.log
      args:
        options:
          - daily
          - rotate 10
          - compress
          - missingok
          - size 100k
          - create 600 svpb svpb
  tags: system

# The following relied on the SysV init script (see above)
# ToDo: Match service management to what is done in production
# - name: StartSVPB
#   # this actually starts  uwsgi !
#   remote_user: root
#   hosts: svpb
#   tasks:
#     - name: ensure start up of SVPB
#       service: name=svpb state=restarted enabled=yes
#     # this is a workaround: state=restarted does not seem to work reliably :-(
#     - name: really restart SVPB
#       shell: /usr/sbin/service svpb restart
#   tags: svpb

# and finally, install the data fixtures. Not automated; this will highly depend on concrete setup

## get the backup process in place: install dropbox, install the crontab
# ToDo: Find a fitting backup solution
# - name: Backup process
#   remote_user: svpb
#   hosts: svpb
#   vars:
#     dropboxuser: svpb
#   tasks:
#     # - name: Download dropbox
#     #   get_url: url=https://www.dropbox.com/download?plat=lnx.x86 dest=/home/svpb
#     # CareFUL: dropxbox needs manual intervention; local access to a url
#     - name: Put encrpytion password for dropbox in place
#       replace: dest=/home/svpb/svpb/dump.sh regexp=XXXX replace=uRohX5aeyei4Xoov
#     - name: Cronjob for backup
#       cron: name="backup SVPB" hour="3" minute="5" user=svpb state=present job="cd /home/svpb/svpb ; /home/svpb/svpb/dump.sh > /home/svpb/svpb/logs/dump.log 2>&1"
#     - name: Install dropbox init script
#       template: src=./dropbox.conf dest=/etc/init.d/dropbox mode=0755
#       remote_user: root
#     - name: Startup dropxbox service
#       service: name=dropbox state=restarted enabled=yes
#       remote_user: root
#       register: dropboxStartOutput
#     - name: Debug output from Dropbox service start
#       debug: var=dropboxStartOutput
#   tags: backup

- name: Regular jobs
  # check consistency, later on: send out emails
  remote_user: svpb
  hosts: svpb
  tasks:
    - name: Check Medlung consistency regularly, cronjob
      cron: name="Meldung check" hour="3" minute="10" user=svpb state=present job="cd /home/svpb/svpb ; python manage.py meldungConsistent > /home/svpb/svpb/logs/check.log  2>&1"
    - name: Yearend check, set Arbeitslast to default for newly joined members
      cron: name="Yearend check" hour="23" minute="0" day="31" month="12" user=svpb state=present job="cd /home/svpb/svpb ; python manage.py yearendArbeitslast > /home/svpb/svpb/logs/yearend.log  2>&1"
  tags: regular
