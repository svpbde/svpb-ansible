---

# An Ansible playbook to install the SVPB Web application on a Linux machine
# Assumptions:
# - dnf-based system; tested on CentOS 8 Stream
# - root access has been ensured by copying the public key of the user running
#   this playbook to ~root/.ssh/authorized_keys
# Currently only intended for tests in a local VM with vagrant, not tested in
# production.


- name: Put SELinux in permissive mode, logging actions that would be blocked.
  remote_user: root
  hosts: svpb
  tasks:
    - ansible.posix.selinux:
        policy: targeted
        state: permissive


- name: PostgresDB
  remote_user: root
  hosts: svpb
  tasks:
    - name: Install postgresql
      ansible.builtin.dnf:
        name: postgresql-server
        state: latest
    - name: Check if postgresql needs init
      ansible.builtin.stat:
        path: /var/lib/pgsql/data/PG_VERSION
      register: pgdata_dir_initialized
    - name: Init postgresql
      ansible.builtin.command: postgresql-setup --initdb
      when: not pgdata_dir_initialized.stat.exists
    - name: Enable local login with hashed password - IPv4
      ansible.builtin.replace:
        dest: /var/lib/pgsql/data/pg_hba.conf
        regexp: ^(host[ ]+all[ ]+all[ ]+127.0.0.1/32[ ]+)ident
        replace: \1md5
    - name: Enable local login with hashed password - IPv6
      ansible.builtin.replace:
        dest: /var/lib/pgsql/data/pg_hba.conf
        regexp: ^(host[ ]+all[ ]+all[ ]+::1/128[ ]+)ident
        replace: \1md5
    - name: Enable & restart service
      ansible.builtin.service:
        name: postgresql
        state: restarted
        enabled: true
    - name: Ansible postgresdb requirements via dnf
      ansible.builtin.dnf:
        name: python3-psycopg2
        state: latest
    - name: Create Postgres DB
      become: true
      become_user: postgres
      community.postgresql.postgresql_db:
        name: svpbdata
    - name: Create Postgres DB User
      become: true
      become_user: postgres
      community.postgresql.postgresql_user:
        db: svpbdata
        name: svpbdb
        password: Eef1Aef3
        encrypted: true
        priv: "ALL"


- name: CreateSVPB-User
  hosts: svpb
  remote_user: root
  tasks:
    - action: user name=svpb comment="SVPB Arbeitsplan User" generate_ssh_key=yes state=present shell=/bin/bash
    # - action: copy src=~/.ssh/id_rsa.pub dest=/home/svpb/.ssh/authorized_keys owner=svpb group=svpb mode=0600
    # Instead of adding own public key (line above) allow access for vagrant's
    # ssh key, which is already authorized for root
    - ansible.builtin.file:
        path: ~svpb/.ssh
        state: directory
        owner: svpb
        group: svpb
        mode: 0700
    - name: Copy root's authorized_keys to svpb user
      ansible.builtin.copy:
        src: /root/.ssh/authorized_keys
        dest: ~svpb/.ssh/authorized_keys
        owner: svpb
        group: svpb
        mode: 0700
        force: false
        remote_src: true


- name: Basic software installation
  hosts: svpb
  remote_user: root
  tasks:
    - name: Basic software via dnf
      ansible.builtin.dnf:
        name: "{{ item }}"
        state: latest
      with_items:
        - git
        - glibc-langpack-de
        - python3-devel # needed to build Pillow
        - zlib-devel # needed to build Pillow
        - libjpeg-devel # needed to build Pillow
        - python3-pip
        - python3-virtualenv
        # - ccrypt  # was used for backup encryption, needs rework
        - nginx
  tags: software


- name: GetSVPB
  remote_user: svpb
  hosts: svpb
  tasks:
    - name: Get the repository
      ansible.builtin.git:
        repo: https://github.com/svpbde/svpb.git
        dest: /home/svpb/svpb
        update: false
        version: develop
    - name: Patch the settings file to use the Postgres DB
      ansible.builtin.replace:
        dest: /home/svpb/svpb/svpb/settings.py
        regexp: 'django.db.backends.sqlite3'
        replace: 'django.db.backends.postgresql_psycopg2'
    - name: Patch settings for DB name
      ansible.builtin.replace:
        dest: /home/svpb/svpb/svpb/settings.py
        regexp: "BASE_DIR / 'svpb.sq'"
        replace: "'svpbdata'"
    - name: Patch settings for DB User account
      ansible.builtin.replace:
        dest: /home/svpb/svpb/svpb/settings.py
        regexp: 'UserPlaceholder'
        replace: 'svpbdb'
    - name: Patch settings for DB password
      ansible.builtin.replace:
        dest: /home/svpb/svpb/svpb/settings.py
        regexp: 'PasswordPlaceholder'
        replace: 'Eef1Aef3'
    # ToDo: Clever credential management with differentiation between production and test VM
    #- name: Copy email settings
    #  copy: src=~/c.prog/svpb/svpb/emailSettings.py dest=/home/svpb/svpb/svpb/emailSettings.py owner=svpb group=svpb mode=0600
    - name: Create logs directory
      ansible.builtin.file:
        path: /home/svpb/svpb/logs
        state: directory
    - name: Install python requirements via pip
      ansible.builtin.pip:
        requirements: /home/svpb/svpb/requirements.txt
        virtualenv: /home/svpb/svpb-venv
    - name: Migrate the database
      ansible.builtin.shell: cd svpb ; /home/svpb/svpb-venv/bin/python3 manage.py migrate > logs/migrate.out 2> logs/migrate.err
    - name: Cronjob for emailing
      ansible.builtin.cron:
        name: "Send emails for upcoming jobs"
        hour: "3"
        minute: "0"
        user: svpb
        state: present
        job: "cd /home/svpb/svpb ; /home/svpb/svpb-venv/bin/python3 manage.py upcomingJob 2 > /home/svpb/svpb/logs/upcomingJobs.log  2>&1"
    - name: Cronjob for emailaing earlier
      ansible.builtin.cron:
        name: "Send early emails for upcoming jobs"
        hour: "3"
        minute: "10"
        user: svpb
        state: present
        job: "cd /home/svpb/svpb ; /home/svpb/svpb-venv/bin/python3 manage.py upcomingJob 5 >> /home/svpb/svpb/logs/upcomingJobs.log  2>&1"
    - name: Cronjob for leistungsreminder
      ansible.builtin.cron:
        name: "Send emails to process Leistungsmeldungen"
        hour: "3"
        minute: "20"
        user: svpb
        state: present
        job: "cd /home/svpb/svpb ; /home/svpb/svpb-venv/bin/python3 manage.py reminderLeistungen > /home/svpb/svpb/logs/reminderLeistungen.log  2>&1"
  tags: svpb

- name: Nginx configuration
  # Compare http://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html
  remote_user: svpb
  hosts: svpb
  vars:
    svpbhome: /home/svpb/svpb
    svpbfqdn: mein.svpb.de
  tasks:
    # static files in place:
    - name: Grant nginx access to svpb's home for serving static files
      remote_user: root
      ansible.builtin.file:
        path: ~svpb
        owner: svpb
        group: nginx
        mode: 0750
    - name: Ensure static directory exists
      ansible.builtin.file:
        dest: /home/svpb/svpb/static
        state: directory
        mode: 755
    # Currently already hardcoded in git repo. ToDo: Evaluate if we want it configurable
    # - name: Patch STATIC_ROOT in svpb settings
    #   replace: dest=/home/svpb/svpb/svpb/settings.py regexp="STATIC_ROOT = ''" replace="STATIC_ROOT = '{{ svpbhome }}/static'"
    - name: Run collectstatic
      community.general.django_manage:
        command: collectstatic
        app_path: "{{ svpbhome }}"
        virtualenv: /home/svpb/svpb-venv
    # Currently already hardcoded in git repo. ToDo: Evaluate if we want it configurable
    # # prepare nginx configuration:
    # - name: Patch the svpb_nginx conf file from the default in the git repo FQDN
    #   replace: dest=/home/svpb/svpb/wsgi/svpb_nginx.conf regexp='svpbfqdn' replace='{{ svpbfqdn }}'
    # - name: Patch the svpb_nginx conf file from the default in the git repo Home
    #   replace: dest=/home/svpb/svpb/wsgi/svpb_nginx.conf regexp='svpbhome' replace='{{ svpbhome }}'
    # nginx config patches for local dev VM
    - name: Patch the svpb_nginx conf file - Disable SSL
      ansible.builtin.replace:
        path: /home/svpb/svpb/wsgi/svpb_nginx.conf
        after: "# substitute your machine's IP address or FQDN"
        before: '    charset'
        regexp: '.*'
        replace: ''
    - name: Patch the svpb_nginx conf file - Allow access from localhost
      ansible.builtin.replace:
        path: /home/svpb/svpb/wsgi/svpb_nginx.conf
        after: "server_name "
        before: ';'
        regexp: '.*'
        replace: '127.0.0.1'
    # symblink the just created config file
    - name: Symlink the svpb configuration file from nginx
      ansible.builtin.file:
        dest: /etc/nginx/conf.d/svpb_conf.conf
        src: /home/svpb/svpb/wsgi/svpb_nginx.conf
        state: link
      remote_user: root
    # Currently already hardcoded in git repo. ToDo: Evaluate if we want it configurable
    # # tweak the uwsgi ini file settings
    # - name: Set chdir in uwsgi ini file
    #   ini_file: dest=/home/svpb/svpb/wsgi/uwsgi.ini section=uwsgi option=chdir value=/home/svpb/svpb
    # - name: Set module in uwsgi ini file
    #   ini_file: dest=/home/svpb/svpb/wsgi/uwsgi.ini section=uwsgi option=module value=svpb.wsgi
    # - name: Set socket in uwsgi ini file
    #   ini_file: dest=/home/svpb/svpb/wsgi/uwsgi.ini section=uwsgi option=socket value=":8001"
    - name: Restart and enable nginx
      ansible.builtin.service:
        name: nginx
        state: restarted
        enabled: true
      remote_user: root
    # start uwsgi happens via the svpb start!
  tags: nginx

- name: Setup svpb service with systemd
  remote_user: root
  hosts: svpb
  tasks:
  - name: Place service file
    ansible.builtin.copy:
      dest: /etc/systemd/system/svpb.service
      src: svpb.service
      owner: root
      group: root

- name: StartSVPB
  # this actually starts uwsgi!
  remote_user: root
  hosts: svpb
  tasks:
    - name: Ensure start up of SVPB
      ansible.builtin.service:
        name: svpb
        state: restarted
        enabled: true
  tags: svpb

# and finally, install the data fixtures. Not automated; this will highly depend on concrete setup

## get the backup process in place: install dropbox, install the crontab
# ToDo: Find a fitting backup solution
# - name: Backup process
#   remote_user: svpb
#   hosts: svpb
#   vars:
#     dropboxuser: svpb
#   tasks:
#     # - name: Download dropbox
#     #   get_url: url=https://www.dropbox.com/download?plat=lnx.x86 dest=/home/svpb
#     # CareFUL: dropxbox needs manual intervention; local access to a url
#     - name: Put encrpytion password for dropbox in place
#       replace: dest=/home/svpb/svpb/dump.sh regexp=XXXX replace=uRohX5aeyei4Xoov
#     - name: Cronjob for backup
#       cron: name="backup SVPB" hour="3" minute="5" user=svpb state=present job="cd /home/svpb/svpb ; /home/svpb/svpb/dump.sh > /home/svpb/svpb/logs/dump.log 2>&1"
#     - name: Install dropbox init script
#       template: src=./dropbox.conf dest=/etc/init.d/dropbox mode=0755
#       remote_user: root
#     - name: Startup dropxbox service
#       service: name=dropbox state=restarted enabled=yes
#       remote_user: root
#       register: dropboxStartOutput
#     - name: Debug output from Dropbox service start
#       debug: var=dropboxStartOutput
#   tags: backup

- name: Regular jobs
  # check consistency, later on: send out emails
  remote_user: svpb
  hosts: svpb
  tasks:
    - name: Check Medlung consistency regularly, cronjob
      ansible.builtin.cron:
        name: "Meldung check"
        hour: "3"
        minute: "10"
        user: svpb
        state: present
        job: "cd /home/svpb/svpb ; /home/svpb/svpb-venv/bin/python3 manage.py meldungConsistent > /home/svpb/svpb/logs/check.log  2>&1"
    - name: Yearend check, set Arbeitslast to default for newly joined members
      ansible.builtin.cron:
        name: "Yearend check"
        hour: "23"
        minute: "0"
        day: "31"
        month: "12"
        user: svpb
        state: present
        job: "cd /home/svpb/svpb ; /home/svpb/svpb-venv/bin/python3 manage.py yearendArbeitslast > /home/svpb/svpb/logs/yearend.log  2>&1"
    - name: Send reservation emails
      ansible.builtin.cron:
        name: "Send reservation emails"
        minute: "12"
        user: svpb
        state: present
        job: "cd /home/svpb/svpb ; /home/svpb/svpb-venv/bin/python3 manage.py reservationEmails > /home/svpb/svpb/logs/reservation.emails.log 2>&1"
  tags: regular
